const { Telegraf, Markup } = require('telegraf');
const { BOT_TOKEN, ADMIN_ID } = require('./config');
const db = require('./database');
const fs = require('fs');
const path = require('path');

const bot = new Telegraf(BOT_TOKEN);

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ–∫–æ–≤
const proofDir = path.join(__dirname, 'payments', 'proofs');
const confirmedDir = path.join(__dirname, 'payments', 'confirmed');
const rejectedDir = path.join(__dirname, 'payments', 'rejected');

[proofDir, confirmedDir, rejectedDir].forEach(dir => {
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
  }
});

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
bot.start(async (ctx) => {
  const userId = ctx.from.id;
  const username = ctx.from.username;
  await db.addUser(userId, username);
  
  const keyboard = Markup.keyboard([
    ['üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'],
    ['üéÆ –ó–∞–∫–∞–∑–∞—Ç—å –¥–æ–Ω–∞—Ç', 'üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤'],
    ['‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', 'üìã –ü—Ä–∞–≤–∏–ª–∞']
  ]).resize();

  ctx.reply(
    `‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ü•ù ùô±ùöòùöù ùô∑ùöòùöïùöîùöíùöü ü•ù\n\n` +
    `–¢–≤–æ–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –º–∏—Ä–µ –∏–≥—Ä–æ–≤—ã—Ö —Å–æ–∫—Ä–æ–≤–∏—â!\n\n` +
    `üìã –ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n` +
    `1. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 50‚ÇΩ\n` +
    `2. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤ –¥–µ–Ω—å: 15000‚ÇΩ\n` +
    `3. –í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –≤—Ä—É—á–Ω—É—é\n` +
    `4. –ü—Ä–∏ –æ–ø–ª–∞—Ç–µ –ø—Ä–∏–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ —á–µ–∫`,
    keyboard
  );
});

// –ü—Ä–æ—Ñ–∏–ª—å
bot.hears('üë§ –ü—Ä–æ—Ñ–∏–ª—å', async (ctx) => {
  const user = await db.getUser(ctx.from.id);
  if (!user) {
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è');
    return;
  }

  const rankInfo = db.getRankInfo(user.total_spent);
  const progressBar = db.getProgressBar(user.total_spent, rankInfo.required + user.total_spent);

  const profileText = 
    `${rankInfo.icon} <b>[${rankInfo.name}]</b>\n` +
    `üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>:\n` +
    `‚îú ID: <code>${user.user_id}</code>\n` +
    `‚îú –ë–∞–ª–∞–Ω—Å: <b>${user.balance}‚ÇΩ</b>\n` +
    `‚îú –ó–∞–∫–∞–∑–æ–≤: <b>${user.orders_count}</b>\n` +
    `‚îú –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: <b>${user.total_spent}‚ÇΩ</b>\n` +
    `‚îî –ü—Ä–æ–≥—Ä–µ—Å—Å: [${progressBar}] ${Math.min(Math.floor((user.total_spent / (rankInfo.required + user.total_spent)) * 100), 100)}%\n\n`;

  const nextRankText = rankInfo.nextRank 
    ? `–î–æ ${rankInfo.nextRank} —Ä–∞–Ω–≥–∞: <b>${rankInfo.required}‚ÇΩ</b>`
    : '–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–Ω–≥–∞! üéâ';

  ctx.reply(
    profileText + nextRankText,
    { parse_mode: 'HTML' }
  );
});

// –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤
bot.hears('üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤', async (ctx) => {
  const orders = await db.getOrderHistory(ctx.from.id);
  if (!orders || orders.length === 0) {
    ctx.reply('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤');
    return;
  }

  let historyText = 'üìú <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã</b>:\n\n';
  orders.forEach((order, index) => {
    const date = new Date(order.created_at).toLocaleString('ru-RU');
    historyText += 
      `#${index + 1} ${date}\n` +
      `‚îú –°—É–º–º–∞: ${order.amount}‚ÇΩ\n` +
      `‚îú –ò–≥—Ä–∞: ${order.game || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n` +
      `‚îî –°—Ç–∞—Ç—É—Å: ${getStatusEmoji(order.status)} ${order.status}\n\n`;
  });

  ctx.reply(historyText, { parse_mode: 'HTML' });
});

// –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
bot.hears('üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', (ctx) => {
  ctx.reply(
    '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–æ—Ç 50‚ÇΩ –¥–æ 15000‚ÇΩ):',
    Markup.keyboard([['–û—Ç–º–µ–Ω–∞']]).resize()
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
bot.on('text', async (ctx) => {
  const text = ctx.message.text;
  if (text === '–û—Ç–º–µ–Ω–∞') {
    ctx.reply(
      '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞',
      Markup.keyboard([
        ['üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'],
        ['üéÆ –ó–∞–∫–∞–∑–∞—Ç—å –¥–æ–Ω–∞—Ç', 'üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤'],
        ['‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', 'üìã –ü—Ä–∞–≤–∏–ª–∞']
      ]).resize()
    );
    return;
  }

  const amount = parseInt(text);
  if (isNaN(amount) || amount < 50 || amount > 15000) {
    ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–æ—Ç 50‚ÇΩ –¥–æ 15000‚ÇΩ)');
    return;
  }

  const paymentId = `pay_${Date.now()}_${ctx.from.id}`;
  await db.createPayment(ctx.from.id, amount, paymentId);

  const paymentUrl = `https://yoomoney.ru/quickpay/confirm.xml?receiver=${process.env.YOOMONEY_WALLET}&sum=${amount}&label=${paymentId}`;

  ctx.reply(
    `‚ö† –û–ø–ª–∞—Ç–∏—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç!\n\n` +
    `–°—É–º–º–∞: ${amount}‚ÇΩ\n` +
    `ID –ø–ª–∞—Ç–µ–∂–∞: ${paymentId}\n\n` +
    `[–û–ø–ª–∞—Ç–∏—Ç—å](${paymentUrl})`,
    {
      parse_mode: 'Markdown',
      reply_markup: Markup.inlineKeyboard([
        Markup.button.url('üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', paymentUrl),
        Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_payment')
      ])
    }
  );

  // –¢–∞–π–º–µ—Ä –Ω–∞ 5 –º–∏–Ω—É—Ç
  setTimeout(async () => {
    const payment = await db.getPayment(paymentId);
    if (payment && payment.status === 'pending') {
      ctx.reply(
        `‚è≥ –í —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞.\n` +
        `–ï—Å–ª–∏ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏, –ø—Ä–∏–ª–æ–∂–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∏–¥–Ω—ã –¥–∞—Ç–∞, —Å—É–º–º–∞ –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å).`,
        Markup.keyboard([
          ['üìé –ü—Ä–∏–ª–æ–∂–∏—Ç—å —á–µ–∫'],
          ['–û—Ç–º–µ–Ω–∞']
        ]).resize()
      );
    }
  }, 5 * 60 * 1000);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —á–µ–∫–∞
bot.on('photo', async (ctx) => {
  const fileId = ctx.message.photo[ctx.message.photo.length - 1].file_id;
  const file = await ctx.telegram.getFile(fileId);
  const paymentId = await db.getLastUnpaidPayment(ctx.from.id);

  if (!paymentId) {
    ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–ø–ª–∞—Ç');
    return;
  }

  const filePath = path.join(proofDir, `${paymentId}.jpg`);
  await ctx.telegram.downloadFile(file.file_path, filePath);

  await db.updatePaymentStatus(paymentId, 'needs_review', filePath);

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
  await ctx.telegram.sendPhoto(
    ADMIN_ID,
    fileId,
    {
      caption: `üö® –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ–∫–∞!\n` +
               `–ü–ª–∞—Ç–µ–∂: ${paymentId}\n` +
               `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${ctx.from.username} (ID: ${ctx.from.id})`,
      reply_markup: Markup.inlineKeyboard([
        Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', `confirm_${paymentId}`),
        Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `reject_${paymentId}`)
      ])
    }
  );

  ctx.reply(
    '–ß–µ–∫ –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.',
    Markup.keyboard([
      ['üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'],
      ['üéÆ –ó–∞–∫–∞–∑–∞—Ç—å –¥–æ–Ω–∞—Ç', 'üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤'],
      ['‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', 'üìã –ü—Ä–∞–≤–∏–ª–∞']
    ]).resize()
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
bot.action(/confirm_(.+)/, async (ctx) => {
  const paymentId = ctx.match[1];
  const payment = await db.getPayment(paymentId);

  if (payment) {
    await db.updatePaymentStatus(paymentId, 'confirmed');
    await db.updateBalance(payment.user_id, payment.amount, `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ ${payment.amount}‚ÇΩ`);

    // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —á–µ–∫ –≤ confirmed
    const oldPath = path.join(proofDir, `${paymentId}.jpg`);
    const newPath = path.join(confirmedDir, `${paymentId}.jpg`);
    fs.renameSync(oldPath, newPath);

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await ctx.telegram.sendMessage(
      payment.user_id,
      `‚úÖ –í–∞—à –ø–ª–∞—Ç—ë–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –ù–∞ –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ ${payment.amount}‚ÇΩ.`
    );

    ctx.answerCbQuery('–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω');
    ctx.editMessageCaption('‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω');
  }
});

bot.action(/reject_(.+)/, async (ctx) => {
  const paymentId = ctx.match[1];
  const payment = await db.getPayment(paymentId);

  if (payment) {
    await db.updatePaymentStatus(paymentId, 'rejected');

    // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —á–µ–∫ –≤ rejected
    const oldPath = path.join(proofDir, `${paymentId}.jpg`);
    const newPath = path.join(rejectedDir, `${paymentId}.jpg`);
    fs.renameSync(oldPath, newPath);

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await ctx.telegram.sendMessage(
      payment.user_id,
      `‚ùå –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ–∫–∞ –ø–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ–ø–ª–∞—Ç—É.`
    );

    ctx.answerCbQuery('–ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω');
    ctx.editMessageCaption('‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω');
  }
});

// –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
setInterval(async () => {
  const stats = await db.getDailyStats();
  const date = new Date().toLocaleDateString('ru-RU');
  
  await bot.telegram.sendMessage(
    ADMIN_ID,
    `üí∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ ${date}:\n\n` +
    `–ó–∞–∫–∞–∑–æ–≤: ${stats.orders_count}\n` +
    `–í—ã—Ä—É—á–∫–∞: ${stats.total_revenue || 0}‚ÇΩ\n` +
    `–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.unique_users}`
  );
}, 24 * 60 * 60 * 1000);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error(`–û—à–∏–±–∫–∞ –¥–ª—è ${ctx.updateType}:`, err);
  ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch()
  .then(() => console.log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!'))
  .catch(err => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', err));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getStatusEmoji(status) {
  switch (status) {
    case 'completed': return '‚úÖ';
    case 'pending': return '‚è≥';
    case 'cancelled': return '‚ùå';
    default: return '‚ùì';
  }
} 